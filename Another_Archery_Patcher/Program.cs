using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using Mutagen.Bethesda.WPF.Reflection.Attributes;
using Mutagen.Bethesda.Plugins;

namespace Another_Archery_Patcher
{
    public class Program
    {
        // FUNCTIONS
        public static void HandleProjectile(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, Mutagen.Bethesda.Skyrim.IProjectileGetter proj, ProjectileTweaks tweaks)
        {
            var projectile = state.PatchMod.Projectiles.GetOrAddAsOverride(proj);
            projectile.Speed = tweaks.speed;
            projectile.Gravity = tweaks.gravity;
            projectile.ImpactForce = tweaks.impactForce;
            projectile.SoundLevel = (uint)tweaks.soundLevel;
            if (projectile.Flags.HasFlag(Projectile.Flag.Supersonic) && settings.Value.GeneralTweaks.disable_supersonic) { projectile.Flags &= ~Projectile.Flag.Supersonic; }
        }
        public static void HandleProjectile(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, Mutagen.Bethesda.Skyrim.IProjectileGetter proj, ProjectileTweaks tweaks, string log_message)
        {
            HandleProjectile(state, proj, tweaks);
            Console.WriteLine(log_message);
        }
        public static bool IsBloodcursedArrow(Mutagen.Bethesda.Skyrim.IProjectileGetter proj)
        {
            foreach (string it in settings.Value.ArrowTweaks.bloodcursed_id)
                if (it == proj.EditorID)
                    return true;
            return false;
        }
        public static bool IsBlacklisted(Mutagen.Bethesda.Skyrim.IProjectileGetter proj)
        {
            return settings.Value.blacklist.Contains(proj) || proj.EditorID == "MQ101ArrowSteelProjectile"; // check if the blacklist contains projectile
        }
        public static void LogConfiguration()
        {
            Console.WriteLine("-- ACTIVE SETTINGS --");
            var arr = settings.Value.to_string();
            foreach(var it in arr)
                Console.WriteLine(it);
        }

        // SETTINGS OBJECT
        static Lazy<TopLevelSettings> settings = null!;

        // MAIN
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings( "TopLevelSettings", "settings.json", out settings )
                .SetTypicalOpen(GameRelease.SkyrimSE, "AnotherArcheryPatcher.esp")
                .Run(args);
        }
        // PATCHER FUNCTION
        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            LogConfiguration();
            if ( settings == null ) throw new Exception("Settings were null! (How did this happen?)"); // throw early if settings are null
            if (settings.Value.GameSettings.disable_autoaim) // disable auto-aim
            {
                state.PatchMod.GameSettings.Add(new GameSettingFloat(state.PatchMod.GetNextFormKey(), state.PatchMod.SkyrimRelease) { EditorID = "fAutoAimMaxDegrees", Data = 0.0f });          // Add new game setting to patch: "fAutoAimMaxDegrees"
                state.PatchMod.GameSettings.Add(new GameSettingFloat(state.PatchMod.GetNextFormKey(), state.PatchMod.SkyrimRelease) { EditorID = "fAutoAimMaxDistance", Data = 0.0f });         // Add new game setting to patch: "fAutoAimMaxDistance"
                state.PatchMod.GameSettings.Add(new GameSettingFloat(state.PatchMod.GetNextFormKey(), state.PatchMod.SkyrimRelease) { EditorID = "fAutoAimScreenPercentage", Data = 0.0f });    // Add new game setting to patch: "fAutoAimScreenPercentage"
                state.PatchMod.GameSettings.Add(new GameSettingFloat(state.PatchMod.GetNextFormKey(), state.PatchMod.SkyrimRelease) { EditorID = "fAutoAimMaxDegrees3rdPerson", Data = 0.0f }); // Add new game setting to patch: "fAutoAimMaxDegrees3rdPerson"
            }
            if (settings.Value.GameSettings.disable_npcDodge) // disable ninja dodge
            {
                state.PatchMod.GameSettings.Add(new GameSettingFloat(state.PatchMod.GetNextFormKey(), state.PatchMod.SkyrimRelease) { EditorID = "fCombatDodgeChanceMax", Data = 0.0f });       // Add new game setting to patch: "fCombatDodgeChanceMax"
            }
            foreach (var proj in state.LoadOrder.PriorityOrder.Projectile().WinningOverrides())
            {
                string id = proj.EditorID!;
                if (id == null) continue;
                if (proj.Type == Projectile.TypeEnum.Arrow && !IsBlacklisted(proj))
                {
                    if (settings.Value.ArrowTweaks.disable_gravity_bloodcursed && IsBloodcursedArrow(proj)) // check bloodcursed gravity fix boolean first, then if the projectile is a bloodcursed arrow.
                        HandleProjectile(state, proj, new(true, settings.Value.ArrowTweaks.speed, 0.0f, settings.Value.ArrowTweaks.impactForce, settings.Value.ArrowTweaks.soundLevel), "Finished processing special arrow: \"" + id + "\" (Disabled Gravity)");
                    else if (id.Contains("Trap", StringComparison.OrdinalIgnoreCase) && settings.Value.BoltTweaks.include_ballista_trap)
                        HandleProjectile(state, proj, new(true, settings.Value.BoltTweaks.speed * 2.0f, 0.35f, 15.0f, SoundLevel.loud), "Finished processing bolt: \"" + id + '\"');
                    else if ((id.Contains("SSM", StringComparison.OrdinalIgnoreCase) || id.Contains("Spear", StringComparison.OrdinalIgnoreCase)) && settings.Value.ThrowableTweaks.enabled)
                        HandleProjectile(state, proj, settings.Value.ThrowableTweaks, "Finished processing throwable: \"" + id + '\"');
                    else if (id.Contains("Arrow", StringComparison.OrdinalIgnoreCase) && settings.Value.ArrowTweaks.enabled)
                        HandleProjectile(state, proj, settings.Value.ArrowTweaks, "Finished processing arrow: \"" + id + '\"');
                    else if (id.Contains("Bolt", StringComparison.OrdinalIgnoreCase) && settings.Value.BoltTweaks.enabled)
                        HandleProjectile(state, proj, settings.Value.BoltTweaks);
                }
            }
        }
    }
}
