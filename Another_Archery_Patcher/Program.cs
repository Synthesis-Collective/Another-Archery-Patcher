using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using Mutagen.Bethesda.WPF.Reflection.Attributes;
using Mutagen.Bethesda.Plugins;

namespace Another_Archery_Patcher
{
    public class Program
    {
        private static void HandleProjectile(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, Mutagen.Bethesda.Skyrim.IProjectileGetter proj, ProjectileTweaks tweaks, string logMessage = "")
        {
            var projectile = state.PatchMod.Projectiles.GetOrAddAsOverride(proj);
            projectile.Speed = tweaks.speed;
            projectile.Gravity = tweaks.gravity;
            projectile.ImpactForce = tweaks.impactForce;
            projectile.SoundLevel = (uint)tweaks.soundLevel;
            if (projectile.Flags.HasFlag(Projectile.Flag.Supersonic) && settings.Value.GeneralTweaks.disable_supersonic) { projectile.Flags &= ~Projectile.Flag.Supersonic; }
            if (logMessage.Length > 0)
                Console.WriteLine(logMessage);
        }
        private static bool IsBlacklisted(Mutagen.Bethesda.Skyrim.IProjectileGetter proj)
        {
            return settings.Value.blacklist.Contains(proj) || settings.Value.id_blacklist.Contains(proj.EditorID!.ToString()); // check if the blacklist or formid blacklist contains projectile
        }
        private static Lazy<TopLevelSettings> settings = null!;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "AnotherArcheryPatcher.esp")
                .Run(args);
        }
        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            if ( settings == null ) throw new Exception("Settings were null! (How did this happen?)"); // throw early if settings are null
            if (settings.Value.GameSettings.disable_autoaim) // disable auto-aim
            {
                state.PatchMod.GameSettings.Add(new GameSettingFloat(state.PatchMod.GetNextFormKey(), state.PatchMod.SkyrimRelease) { EditorID = "fAutoAimMaxDegrees", Data = 0.0f });          // Add new game setting to patch: "fAutoAimMaxDegrees"
                state.PatchMod.GameSettings.Add(new GameSettingFloat(state.PatchMod.GetNextFormKey(), state.PatchMod.SkyrimRelease) { EditorID = "fAutoAimMaxDistance", Data = 0.0f });         // Add new game setting to patch: "fAutoAimMaxDistance"
                state.PatchMod.GameSettings.Add(new GameSettingFloat(state.PatchMod.GetNextFormKey(), state.PatchMod.SkyrimRelease) { EditorID = "fAutoAimScreenPercentage", Data = 0.0f });    // Add new game setting to patch: "fAutoAimScreenPercentage"
                state.PatchMod.GameSettings.Add(new GameSettingFloat(state.PatchMod.GetNextFormKey(), state.PatchMod.SkyrimRelease) { EditorID = "fAutoAimMaxDegrees3rdPerson", Data = 0.0f }); // Add new game setting to patch: "fAutoAimMaxDegrees3rdPerson"
                Console.WriteLine("Finished removing auto-aim.");
            }
            if (settings.Value.GameSettings.disable_npcDodge) // disable ninja dodge
            {
                state.PatchMod.GameSettings.Add(new GameSettingFloat(state.PatchMod.GetNextFormKey(), state.PatchMod.SkyrimRelease) { EditorID = "fCombatDodgeChanceMax", Data = 0.0f });       // Add new game setting to patch: "fCombatDodgeChanceMax"
                Console.WriteLine("Finished patching NPC Ninja Dodge bug.");
            }
            foreach (var proj in state.LoadOrder.PriorityOrder.Projectile().WinningOverrides()) { // iterate through winning projectile overrides
                if (proj.Type == Projectile.TypeEnum.Arrow && !IsBlacklisted(proj)) { // if this projectile is not blacklisted, process it
                    var id = proj.EditorID; // get the editor ID of this projectile
                    if (id != null ) {
                        if (settings.Value.ArrowTweaks.bloodcursed_id.Contains(id)) {
                            if (settings.Value.ArrowTweaks.disable_gravity_bloodcursed)
                                HandleProjectile(state, proj, new(true, settings.Value.ArrowTweaks.speed, 0.0f, settings.Value.ArrowTweaks.impactForce, settings.Value.ArrowTweaks.soundLevel), "Finished processing special arrow: \"" + id + "\" (Disabled Gravity)");
                            else
                                HandleProjectile(state, proj, settings.Value.ArrowTweaks, "Finished processing arrow: \"" + id + '\"');
                        }
                        else if (id.Contains("Trap", StringComparison.OrdinalIgnoreCase) && settings.Value.BoltTweaks.enabled)
                            HandleProjectile(state, proj, new(true, 6400.0f, 0.69f, 75.0f, SoundLevel.very_loud), "Finished processing bolt: \"" + id + '\"');
                        else if ((id.Contains("SSM", StringComparison.OrdinalIgnoreCase) || id.Contains("Spear", StringComparison.OrdinalIgnoreCase)) && settings.Value.ThrowableTweaks.enabled)
                            HandleProjectile(state, proj, settings.Value.ThrowableTweaks, "Finished processing spear: \"" + id + '\"');
                        else if (id.Contains("Arrow", StringComparison.OrdinalIgnoreCase) && settings.Value.ArrowTweaks.enabled)
                            HandleProjectile(state, proj, settings.Value.ArrowTweaks, "Finished processing arrow: \"" + id + '\"');
                        else if (id.Contains("Bolt", StringComparison.OrdinalIgnoreCase) && settings.Value.BoltTweaks.enabled)
                            HandleProjectile(state, proj, settings.Value.BoltTweaks, "Finished processing bolt: \"" + id + '\"');
                    }
                }
            }
        }
    }
}
