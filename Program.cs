using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;

namespace AATPatcher
{
    public class Program
    {
        public enum SoundLevel
        {
            silent = 0,
            normal = 1,
            loud = 2,
            very_loud = 3,
        }

        public class GameSettings
        {
            public bool disable_autoaim = true;
            public bool disable_npcDodge = false;
            public GameSettings(bool disableAutoAim, bool disableNPCDodge)
            {
                disable_autoaim = disableAutoAim;
                disable_npcDodge = disableNPCDodge;
            }
        }
        public class ProjectileTweaks
        {
            public bool enabled;
            public float speed;
            public float gravity;
            public float impactForce;
            public SoundLevel soundLevel;
            public bool disable_supersonic;
            public ProjectileTweaks(bool enable, float proj_speed, float proj_gravity, float proj_impactForce, SoundLevel proj_soundLevel, bool flag_disable_supersonic)
            {
                enabled = enable;
                speed = proj_speed;
                gravity = proj_gravity;
                impactForce = proj_impactForce;
                soundLevel = proj_soundLevel;
                disable_supersonic = flag_disable_supersonic;
            }
        }
        public class TopLevelSettings
        {
            public ProjectileTweaks ArrowTweaks = new(true, 5000.0f, 0.34f, 0.44f, SoundLevel.silent, true);
            public ProjectileTweaks BoltTweaks = new(true, 5000.0f, 0.34f, 0.44f, SoundLevel.silent, true);
            public ProjectileTweaks ThrowableTweaks = new(true, 5000.0f, 0.34f, 0.44f, SoundLevel.silent, true);
            public ProjectileTweaks SpecialTweaks = new(true, 5000.0f, 0.34f, 0.44f, SoundLevel.silent, true);
            public GameSettings GameSettings = new(true, false);
        }
        static Lazy<TopLevelSettings> settings = null!;

        public static void handle_special_projectile(string id, Mutagen.Bethesda.Skyrim.IProjectileGetter proj)
        {

        }

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out settings
                )
                .SetTypicalOpen(GameRelease.SkyrimSE, "YourPatcher.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            if ( settings == null)
                throw new Exception("Settings object was null!");
            foreach (var proj in state.LoadOrder.PriorityOrder.Projectile().WinningOverrides()) {
                var id = proj.EditorID;
                if ( id != null )
                {
                    if ( (id.Contains("SSM", StringComparison.OrdinalIgnoreCase) || id.Contains("Spear", StringComparison.OrdinalIgnoreCase)) && settings.Value.ThrowableTweaks.enabled )
                    {
                        var spear = state.PatchMod.Projectiles.GetOrAddAsOverride(proj);
                        spear.Speed = settings.Value.ThrowableTweaks.speed;
                        spear.Gravity = settings.Value.ThrowableTweaks.gravity;
                        spear.ImpactForce = settings.Value.ThrowableTweaks.impactForce;
                        spear.SoundLevel = (uint)settings.Value.ThrowableTweaks.soundLevel;
                        Console.WriteLine("Finished processing spear: " + id);
                    }
                    else if ( id.Contains("Arrow", StringComparison.OrdinalIgnoreCase) && settings.Value.ArrowTweaks.enabled && !id.Contains("Bloodcursed", StringComparison.OrdinalIgnoreCase) ) // if projectile is an arrow
                    {
                        var arrow = state.PatchMod.Projectiles.GetOrAddAsOverride(proj);
                        arrow.Speed = settings.Value.ArrowTweaks.speed;
                        arrow.Gravity = settings.Value.ArrowTweaks.gravity;
                        arrow.ImpactForce = settings.Value.ArrowTweaks.impactForce;
                        arrow.SoundLevel = (uint)settings.Value.ArrowTweaks.soundLevel;
                        Console.WriteLine("Finished processing arrow: " + id);
                    }
                    else if ( id.Contains("Bolt", StringComparison.OrdinalIgnoreCase) && settings.Value.BoltTweaks.enabled && !id.Contains("Trap", StringComparison.OrdinalIgnoreCase) ) // if projectile is a bolt
                    {
                        var bolt = state.PatchMod.Projectiles.GetOrAddAsOverride(proj);
                        bolt.Speed = settings.Value.BoltTweaks.speed;
                        bolt.Gravity = settings.Value.BoltTweaks.gravity;
                        bolt.ImpactForce = settings.Value.BoltTweaks.impactForce;
                        bolt.SoundLevel = (uint)settings.Value.BoltTweaks.soundLevel;
                        Console.WriteLine("Finished processing bolt: " + id);
                    }
                    else if ( proj.Type == Projectile.TypeEnum.Arrow && settings.Value.SpecialTweaks.enabled ) // if projectile is at least of type arrow
                    {
                        var special = state.PatchMod.Projectiles.GetOrAddAsOverride(proj);
                        special.Speed = settings.Value.SpecialTweaks.speed;
                        special.Gravity = settings.Value.SpecialTweaks.gravity;
                        special.ImpactForce = settings.Value.SpecialTweaks.impactForce;
                        special.SoundLevel = (uint)settings.Value.SpecialTweaks.soundLevel;
                        Console.WriteLine("Finished processing special projectile: " + id);
                    }
                    else
                    {
                    //    Console.WriteLine("Skipped projectile " + id);
                    }
                }
                else
                {
                    Console.WriteLine("Projectile ID was null!");
                }
            }
        }
    }
}
