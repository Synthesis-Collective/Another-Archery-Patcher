using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;

namespace AATPatcher
{
    public class Program
    {
        public enum SoundLevel
        {
            silent = 0,
            normal = 1,
            loud = 2,
            very_loud = 3,
        }
        public class Settings
        {
            public bool disable_supersonic = true;
            public bool disable_autoaim = true;
            public bool disable_npcDodge = false;

            public bool arrow_tweaks_enabled = true;
            public float arrow_speed = 5000.0f;
            public float arrow_gravity = 0.35f;
            public float arrow_impactForce = 0.44f;
            public SoundLevel arrow_soundLevel = SoundLevel.silent;

            public bool bolt_tweaks_enabled = true;
            public float bolt_speed = 5800.0f;
            public float bolt_gravity = 0.35f;
            public float bolt_impactForce = 0.44f;
            public SoundLevel bolt_soundLevel = SoundLevel.normal;

            public bool spear_tweaks_enabled = true;
            public float spear_speed = 5000.0f;
            public float spear_gravity = 0.35f;
            public float spear_impactForce = 0.44f;
            public SoundLevel spear_soundLevel = SoundLevel.silent;

            public bool special_tweaks_enabled = true;
            public float special_speed = 5000.0f;
            public float special_gravity = 0.35f;
            public float special_impactForce = 0.44f;
            public SoundLevel special_soundLevel = SoundLevel.silent;

        }
        static Lazy<Settings> settings = null!;

        public static void handle_special_projectile()
        {

        }

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out settings
                )
                .SetTypicalOpen(GameRelease.SkyrimSE, "YourPatcher.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (var proj in state.LoadOrder.PriorityOrder.Projectile().WinningOverrides()) {
                var id = proj.EditorID;
                if ( id != null )
                {
                    if ( id.Contains("Trap", StringComparison.OrdinalIgnoreCase))
                    {

                    }
                    if ( (id.Contains("SSM", StringComparison.OrdinalIgnoreCase) || id.Contains("Spear", StringComparison.OrdinalIgnoreCase)) && settings.Value.spear_tweaks_enabled )
                    {
                        var spear = state.PatchMod.Projectiles.GetOrAddAsOverride(proj);
                        spear.Speed = settings.Value.spear_speed;
                        spear.Gravity = settings.Value.spear_gravity;
                        spear.ImpactForce = settings.Value.spear_impactForce;
                        spear.SoundLevel = (uint)settings.Value.spear_soundLevel;
                        Console.WriteLine("Finished processing spear: " + id);
                    }
                    else if ( id.Contains("Arrow", StringComparison.OrdinalIgnoreCase) && settings.Value.arrow_tweaks_enabled && !id.Contains("Bloodcursed", StringComparison.OrdinalIgnoreCase) ) // if projectile is an arrow
                    {
                        var arrow = state.PatchMod.Projectiles.GetOrAddAsOverride(proj);
                        arrow.Speed = settings.Value.arrow_speed;
                        arrow.Gravity = settings.Value.arrow_gravity;
                        arrow.ImpactForce = settings.Value.arrow_impactForce;
                        arrow.SoundLevel = (uint)settings.Value.arrow_soundLevel;
                        Console.WriteLine("Finished processing arrow: " + id);
                    }
                    else if ( id.Contains("Bolt", StringComparison.OrdinalIgnoreCase) && settings.Value.bolt_tweaks_enabled ) // if projectile is a bolt
                    {
                        var bolt = state.PatchMod.Projectiles.GetOrAddAsOverride(proj);
                        bolt.Speed = settings.Value.bolt_speed;
                        bolt.Gravity = settings.Value.bolt_gravity;
                        bolt.ImpactForce = settings.Value.bolt_impactForce;
                        bolt.SoundLevel = (uint)settings.Value.bolt_soundLevel;
                        Console.WriteLine("Finished processing bolt: " + id);
                    }
                    else if ( proj.Type == Projectile.TypeEnum.Arrow && settings.Value.special_tweaks_enabled ) // if projectile is at least of type arrow
                    {
                        var special = state.PatchMod.Projectiles.GetOrAddAsOverride(proj);
                        special.Speed = settings.Value.special_speed;
                        special.Gravity = settings.Value.special_gravity;
                        special.ImpactForce = settings.Value.special_impactForce;
                        special.SoundLevel = (uint)settings.Value.special_soundLevel;
                        Console.WriteLine("Finished processing special projectile: " + id);
                    }
                    else
                    {
                    //    Console.WriteLine("Skipped projectile " + id);
                    }
                }
                else
                {
                    Console.WriteLine("Projectile ID was null!");
                }
            }
        }
    }
}
